using System;

namespace ProjectEuler.Problem8
{
    public class Problem8
    {
        // The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
        //
        // 73167176531330624919225119674426574742355349194934
        // 96983520312774506326239578318016984801869478851843
        // 85861560789112949495459501737958331952853208805511
        // 12540698747158523863050715693290963295227443043557
        // 66896648950445244523161731856403098711121722383113
        // 62229893423380308135336276614282806444486645238749
        // 30358907296290491560440772390713810515859307960866
        // 70172427121883998797908792274921901699720888093776
        // 65727333001053367881220235421809751254540594752243
        // 52584907711670556013604839586446706324415722155397
        // 53697817977846174064955149290862569321978468622482
        // 83972241375657056057490261407972968652414535100474
        // 82166370484403199890008895243450658541227588666881
        // 16427171479924442928230863465674813919123162824586
        // 17866458359124566529476545682848912883142607690042
        // 24219022671055626321111109370544217506941658960408
        // 07198403850962455444362981230987879927244284909188
        // 84580156166097919133875499200524063689912560717606
        // 05886116467109405077541002256983155200055935729725
        // 71636269561882670428252483600823257530420752963450
        //
        // Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
        public static void Solve()
        {
            const string input = "73167176531330624919225119674426574742355349194934" +
                                 "96983520312774506326239578318016984801869478851843" +
                                 "85861560789112949495459501737958331952853208805511" +
                                 "12540698747158523863050715693290963295227443043557" +
                                 "66896648950445244523161731856403098711121722383113" +
                                 "62229893423380308135336276614282806444486645238749" +
                                 "30358907296290491560440772390713810515859307960866" +
                                 "70172427121883998797908792274921901699720888093776" +
                                 "65727333001053367881220235421809751254540594752243" +
                                 "52584907711670556013604839586446706324415722155397" +
                                 "53697817977846174064955149290862569321978468622482" +
                                 "83972241375657056057490261407972968652414535100474" +
                                 "82166370484403199890008895243450658541227588666881" +
                                 "16427171479924442928230863465674813919123162824586" +
                                 "17866458359124566529476545682848912883142607690042" +
                                 "24219022671055626321111109370544217506941658960408" +
                                 "07198403850962455444362981230987879927244284909188" +
                                 "84580156166097919133875499200524063689912560717606" +
                                 "05886116467109405077541002256983155200055935729725" +
                                 "71636269561882670428252483600823257530420752963450";

            var beginSubstring = 0;
            var result = 0;    // ^ keep convention .. so once var is assigned.. it becomes a "strut"  in C# .. unassigned values are identified prior. like long??
            
            long tempResult; // this value long because var will assign as (int) but this way is better, because a variable is created first and points to heap memory .. or else a new variable will be created for each loop
            /* 
                so in here 999 is the last digit,  999 - 13 = 986    
                input.Length = 1000      so  1000 -14 should lead to position 986 as last digit.. you want to stop at 987 so 
                -13 here           
            */
            while (beginSubstring < input.Length - 13)  //  -13 should not lead out of index if i am correct the Length should be 1000 here
            {
                tempResult = 1;
                var evalString = input.Substring(beginSubstring, (beginSubstring+13));  // in here your Substring end value should also increase by beginSubstring + 13
                
                foreach (var t in evalString)
                {
                    tempResult *= (long)char.GetNumericValue(t); 
                }
                if (tempResult > result)
                {
                    result = tempResult;
                }
                beginSubstring++;
            }
            Console.WriteLine($"The answer is {result}.");
        }
    }
}
